


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-9 Glitch Sessions",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Introduce Sessions onto the Playlist application, enabling user accounts and cookie-based authentication.</p>",
  "folder" : "book-a-glitch-sessions",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Objectives",
    "shortTitle": "Lab-9 Glitch Sessions",
    "contentMd" : "# Objectives\r\n\r\nIntroduce Sessions onto the Playlist application, enabling user accounts and cookie-based authentication.\r\n\r\n"
    },
  
    {
    "title": "# Array Exercises",
    "shortTitle": "Exercise Solutions",
    "contentMd" : "# Array Exercises\r\n\r\nThe solutions from the JavaScript Arrays lab can be downloaded here: [week8.zip](archives/week8.zip)"
    },
  
    {
    "title": "# Playlist Model",
    "shortTitle": "01",
    "contentMd" : "# Playlist Model\r\n\r\nThis lab is based on Playlist-4. This can be imported into a new Glitch project from `rbirney/playlist4-complete`.\r\n\r\nIn this lab we are going to create a user model (`user-store.json`) and manipulate it with methods stored in `user-store.js`. We will then associate each playlist with \r\na specific user (by their id).\r\n\r\n## models/playlist-store.js\r\n\r\nIf your project has any playlists in the json store, delete them now. Your store should look like this:\r\n\r\n## models/playlist-store.json\r\n\r\n~~~\r\n{\r\n  \"playlistCollection\": [\r\n  ]\r\n}\r\n~~~\r\n\r\n\r\nWe need a new method in the `playlist-store` module, which will retrieve a playlist based on a specific user id.\r\n\r\n## models/playlist-store.js\r\n\r\n~~~\r\n...\r\n  getUserPlaylists(userid) {\r\n    return this.store.findBy(this.collection, { userid: userid });\r\n  },\r\n...\r\n~~~\r\n\r\nThis new method takes a userid, and will only fetch playlists belonging to the user with the specific id. \r\nWe have not introduced the User model yet - we will do so now.\r\n"
    },
  
    {
    "title": "# Cookie Parser",
    "shortTitle": "02",
    "contentMd" : "# Cookie Parser\r\n\r\nWe need to install a new library in our project - in the form of a library to manage browser based cookies. This requires two steps:\r\n\r\n# Update package.json\r\n\r\n## package.json\r\n\r\nThis entry must go in:\r\n\r\n~~~\r\n    \"cookie-parser\": \"^1.4.3\",\r\n~~~\r\n\r\nThis is the context, so replace the `dependencies` as follows:\r\n\r\n~~~\r\n...\r\n  \"dependencies\": {\r\n    \"body-parser\": \"^1.15.2\",\r\n    \"cookie-parser\": \"^1.4.3\",\r\n    \"express\": \"^4.14.0\",\r\n    \"express-handlebars\": \"^3.0.0\",\r\n    \"lodash\": \"^4.17.3\",\r\n    \"lowdb\": \"^0.14.0\",\r\n    \"uuid\": \"^3.0.1\",\r\n    \"winston\": \"^2.3.0\"\r\n  },\r\n...\r\n~~~\r\n\r\n# Load the Library\r\n\r\n## server.js\r\n\r\nIn server, we need to import and the initialise the library:\r\n\r\n~~~\r\n...\r\nconst cookieParser = require('cookie-parser');\r\n...\r\napp.use(cookieParser());\r\n...\r\n~~~\r\n\r\n\r\nThis is the complete server.js file:\r\n\r\n~~~\r\n'use strict';\r\n\r\nconst express = require('express');\r\nconst logger = require('./utils/logger');\r\nconst bodyParser = require('body-parser');\r\nconst cookieParser = require('cookie-parser');\r\n\r\nconst app = express();\r\napp.use(cookieParser());\r\nconst exphbs = require('express-handlebars');\r\napp.use(bodyParser.urlencoded({ extended: false, }));\r\napp.use(express.static('public'));\r\napp.engine('.hbs', exphbs({\r\n  extname: '.hbs',\r\n  defaultLayout: 'main',\r\n}));\r\napp.set('view engine', '.hbs');\r\n\r\nconst routes = require('./routes');\r\napp.use('/', routes);\r\n\r\nconst listener = app.listen(process.env.PORT || 4000, function () {\r\n  logger.info(`Playlist 4 started on port ${listener.address().port}`);\r\n});\r\n~~~\r\n\r\n"
    },
  
    {
    "title": "# UserStore",
    "shortTitle": "03",
    "contentMd" : "# UserStore\r\n\r\nNow we can introduce a new model:\r\n\r\n## models/user-store.js\r\n\r\n~~~\r\n'use strict';\r\n\r\nconst _ = require('lodash');\r\nconst JsonStore = require('./json-store');\r\n\r\nconst userStore = {\r\n\r\n  store: new JsonStore('./models/user-store.json', {users: []}),\r\n  collection: 'users',\r\n\r\n  getAllUsers() {\r\n    return this.store.findAll(this.collection);\r\n  },\r\n\r\n  addUser(user) {\r\n    this.store.add(this.collection, user);\r\n  },\r\n\r\n  getUserById(id) {\r\n    return this.store.findOneBy(this.collection, { id: id });\r\n  },\r\n\r\n  getUserByEmail(email) {\r\n    return this.store.findOneBy(this.collection, { email: email });\r\n  },\r\n}\r\n\r\nmodule.exports = userStore;\r\n~~~\r\n\r\n\r\n## models/user-store.json\r\n\r\n~~~\r\n{\r\n  \"users\": [\r\n    {\r\n      \"firstName\": \"homer\",\r\n      \"lastName\": \"simpson\",\r\n      \"email\": \"homer@simpson.com\",\r\n      \"password\": \"secret\",\r\n      \"id\": \"3ad52697-6d98-4d80-8273-084de55a86c0\"\r\n    },\r\n    {\r\n      \"firstName\": \"marge\",\r\n      \"lastName\": \"simpson\",\r\n      \"email\": \"marge@simpson.com\",\r\n      \"password\": \"secret\",\r\n      \"id\": \"2b6f0989-7b7f-4a38-ad26-aa06b922d751\"\r\n    }\r\n  ]\r\n}\r\n~~~\r\n\r\nIn the above we are pre-loading two users for test purposes."
    },
  
    {
    "title": "# Accounts views",
    "shortTitle": "04",
    "contentMd" : "# Accounts views\r\n\r\nWe need a suite of new views to support signup / login, so create the following files:\r\n\r\n\r\n## views/index.hbs\r\n\r\n~~~\r\n{{> welcomemenu }}\r\n\r\n<section class=\"ui center aligned middle aligned segment\">\r\n  <p> Sign up or Log in... </p>\r\n</section>\r\n~~~\r\n\r\n## views/login.hbs\r\n\r\n~~~\r\n{{> welcomemenu id='login' }}\r\n\r\n<form class=\"ui stacked segment form\" action=\"/authenticate\" method=\"POST\">\r\n  <h3 class=\"ui header\">Log-in</h3>\r\n  <div class=\"field\">\r\n    <label>Email</label> <input placeholder=\"Email\" name=\"email\" autofocus required>\r\n  </div>\r\n  <div class=\"field\">\r\n    <label>Password</label> <input type=\"password\"  name=\"password\" required >\r\n  </div>\r\n  <button class=\"ui blue submit button\">Login</button>\r\n</form>\r\n~~~\r\n\r\n## views/signup.hbs\r\n\r\n~~~\r\n{{> welcomemenu id=\"signup\"}}\r\n\r\n<form class=\"ui stacked segment form\" action=\"/register\" method=\"POST\">\r\n  <h3 class=\"ui header\">Register</h3>\r\n  <div class=\"two fields\">\r\n    <div class=\"field\">\r\n      <label>First Name</label>\r\n      <input placeholder=\"First Name\" type=\"text\"  name=\"firstName\" autofocus required>\r\n    </div>\r\n    <div class=\"field\">\r\n      <label>Last Name</label>\r\n      <input placeholder=\"Last Name\" type=\"text\"  name=\"lastName\" required>\r\n    </div>\r\n  </div>\r\n  <div class=\"field\">\r\n    <label>Email</label>\r\n    <input placeholder=\"Email\" type=\"text\" name=\"email\" required>\r\n  </div>\r\n  <div class=\"field\">\r\n    <label>Password</label>\r\n    <input type=\"password\" name=\"password\" required>\r\n  </div>\r\n  <button class=\"ui blue submit button\">Submit</button>\r\n</form>\r\n~~~\r\n\r\nIn addition, a new menu which will support the above views:\r\n\r\n## views/partials/welcomemenu.hbs\r\n\r\n~~~\r\n<nav class=\"ui menu\">\r\n  <header class=\"ui header item\"> <a href=\"/\"> Playlist 4 </a></header>\r\n  <div class=\"right menu\">\r\n    <a id=\"signup\" class=\"item\" href=\"/signup\"> Signup  </a>\r\n    <a id=\"login\" class=\"item\" href=\"/login\">  Login   </a>\r\n  </div>\r\n</nav>\r\n\r\n<script>\r\n  $(\"#{{id}}\").addClass(\"active item\");\r\n</script>\r\n~~~\r\n\r\nWe need to extend the menu partial - which will introduce a new menu option to allow a user to log out. And, we will display the name of the logged in user:\r\n\r\n## views/partials/menu.hbs\r\n\r\n~~~\r\n<nav class=\"ui menu\">\r\n  <header class=\"ui header item\"> <a href=\"/start\"> Playlist 4 </a></header>\r\n  <div class=\"right menu\">\r\n    <span class=\"name\">{{fullname}}</span>\r\n    <a id=\"dashboard\" class=\"item\" href=\"/dashboard\"> Dashboard  </a>\r\n    <a id=\"about\" class=\"item\" href=\"/about\"> About </a>\r\n    <a id=\"logout\" class=\"item\" href=\"/logout\"> Logout </a>\r\n  </div>\r\n</nav>\r\n\r\n<script>\r\n  $(\"#{{id}}\").addClass(\"active item\");\r\n</script>\r\n~~~\r\n\r\n## public/stylesheets/style.css\r\n\r\nAnd finally, we need to create a file called `style.css` (public/stylesheets/style.css) and add the following style rule: \r\n\r\n~~~\r\n.name{\r\n  padding-top:20px;\r\n  padding-right:5px;\r\n  line-height:20px;\r\n  font-weight:bold;\r\n}\r\n~~~\r\n"
    },
  
    {
    "title": "# Accounts controller",
    "shortTitle": "05",
    "contentMd" : "# Accounts controller\r\n\r\nThis is a new controller to support these views:\r\n\r\n##controllers/accounts.js\r\n\r\n~~~\r\n'use strict';\r\nconst userstore = require('../models/user-store');\r\nconst logger = require('../utils/logger');\r\nconst uuid = require('uuid');\r\n\r\nconst accounts = {\r\n\r\n  index(request, response) {\r\n    const viewData = {\r\n      title: 'Login or Signup',\r\n    };\r\n    response.render('index', viewData);\r\n  },\r\n\r\n  login(request, response) {\r\n    const viewData = {\r\n      title: 'Login to the Service',\r\n    };\r\n    response.render('login', viewData);\r\n  },\r\n\r\n  logout(request, response) {\r\n    response.cookie('playlist', '');\r\n    response.redirect('/');\r\n  },\r\n\r\n  signup(request, response) {\r\n    const viewData = {\r\n      title: 'Login to the Service',\r\n    };\r\n    response.render('signup', viewData);\r\n  },\r\n\r\n  register(request, response) {\r\n    const user = request.body;\r\n    user.id = uuid();\r\n    userstore.addUser(user);\r\n    logger.info(`registering ${user.email}`);\r\n    response.redirect('/');\r\n  },\r\n\r\n  authenticate(request, response) {\r\n    const user = userstore.getUserByEmail(request.body.email);\r\n    if (user) {\r\n      response.cookie('playlist', user.email);\r\n      logger.info(`logging in ${user.email}`);\r\n      response.redirect('/start');\r\n    } else {\r\n      response.redirect('/login');\r\n    }\r\n  },\r\n\r\n  getCurrentUser (request) {\r\n    const userEmail = request.cookies.playlist;\r\n    return userstore.getUserByEmail(userEmail);\r\n  }\r\n}\r\n\r\nmodule.exports = accounts;\r\n~~~\r\n"
    },
  
    {
    "title": "# Routes",
    "shortTitle": "06",
    "contentMd" : "# Routes\r\n\r\nThese new views and controller  all require new routes:\r\n\r\n## routes.js\r\n\r\nIn particular, these specific routes:\r\n\r\n~~~\r\n...\r\nrouter.get('/', accounts.index);\r\nrouter.get('/login', accounts.login);\r\nrouter.get('/signup', accounts.signup);\r\nrouter.get('/logout', accounts.logout);\r\nrouter.post('/register', accounts.register);\r\nrouter.post('/authenticate', accounts.authenticate);\r\n...\r\n~~~\r\n\r\nThis is the complete revised routes.js file:\r\n\r\n~~~\r\n'use strict';\r\n\r\nconst express = require('express');\r\nconst router = express.Router();\r\n\r\nconst start = require('./controllers/start');\r\nconst dashboard = require('./controllers/dashboard.js');\r\nconst playlist = require('./controllers/playlist.js');\r\nconst about = require('./controllers/about.js');\r\nconst accounts = require ('./controllers/accounts.js');\r\n\r\nrouter.get('/', accounts.index);\r\nrouter.get('/login', accounts.login);\r\nrouter.get('/signup', accounts.signup);\r\nrouter.get('/logout', accounts.logout);\r\nrouter.post('/register', accounts.register);\r\nrouter.post('/authenticate', accounts.authenticate);\r\n\r\nrouter.get('/start', start.index);\r\n\r\nrouter.get('/dashboard', dashboard.index);\r\nrouter.get('/dashboard/deleteplaylist/:id', dashboard.deletePlaylist);\r\nrouter.post('/dashboard/addplaylist', dashboard.addPlaylist);\r\n\r\nrouter.get('/playlist/:id', playlist.index);\r\nrouter.get('/playlist/:id/deletesong/:songid', playlist.deleteSong);\r\nrouter.post('/playlist/:id/addsong', playlist.addSong);\r\nrouter.post('/playlist/:id/updatesong/:songid', playlist.updateSong);\r\n\r\nrouter.get('/about', about.index);\r\n\r\nmodule.exports = router;\r\n~~~\r\n\r\nThe application should be running now. You should see these new views:\r\n\r\n### A new landing page\r\n\r\n![](img/02.png)\r\n\r\n### Signup\r\n\r\n![](img/04.png)\r\n\r\n### login\r\n\r\n![](img/03.png)\r\n\r\n"
    },
  
    {
    "title": "# Start",
    "shortTitle": "07",
    "contentMd" : "# Start\r\n\r\nWhen the user logs in, the first page (`start.hbs`) will welcome them by name. Replace `start.hbs` with the following:\r\n\r\n```\r\n{{> menu}}\r\n\r\n<section class=\"ui center aligned middle aligned segment\">\r\n  <h1 class=\"ui header\">\r\n    Welcome {{fullname}} to the Playlist \r\n  </h1>\r\n  <p>\r\n    A small app to let you compose playlists. Still under construction...\r\n  </p>\r\n</section>\r\n```\r\n\r\n# Dashboard\r\n\r\nTry the following now:\r\n\r\n- Log in as 'homer@simpson.com', 'secret'.\r\n- Add a playlist called 'test'.\r\n- Log out.\r\n- Log in as 'marge@simpson.com', 'secret'.\r\n\r\nNotice that we are seeing Homers test playlist even when we log in as Marge. The playlist-store.json may look like this:\r\n\r\n~~~\r\n{\r\n  \"playlistCollection\": [\r\n    {\r\n      \"id\": \"4a1ea4ec-303e-4b13-bd98-a6b04877e093\",\r\n      \"title\": \"test\",\r\n      \"songs\": []\r\n    }\r\n  ]\r\n}\r\n~~~\r\n\r\nRemember to open the `console` and enter the `refresh` command to ensure the collections are uptodate.\r\n\r\nThis clearly is not what we were aiming for. We should only present the users own playlists.\r\n\r\nHere is how do it - all changes to the dashboard module:\r\n\r\n## controllers/dashboard.js\r\n\r\nIn the top of the module, import the new accounts module:\r\n\r\n~~~\r\n...\r\nconst accounts = require ('./accounts.js');\r\n...\r\n~~~\r\n\r\nRevised index action:\r\n\r\n~~~\r\n...\r\n  index(request, response) {\r\n    logger.info('dashboard rendering');\r\n    const loggedInUser = accounts.getCurrentUser(request);\r\n    if (loggedInUser) {\r\n    const viewData = {\r\n      title: 'Playlist Dashboard',\r\n      playlists: playlistStore.getUserPlaylists(loggedInUser.id),\r\n      fullname: loggedInUser.firstName + ' ' + loggedInUser.lastName,\r\n    };\r\n    logger.info('about to render', viewData.playlists);\r\n    response.render('dashboard', viewData);\r\n    }\r\n    else response.redirect('/');\r\n  },\r\n...\r\n~~~\r\n\r\nThis revised `index` action returns an object for the user logged in. Using the `loggedInUser.id` the playlist associated with that user is returned and the full name\r\nis created by concatenating the the loggedInUser.firstName and loggedInUser.lastName. The playlist will be\r\navailable to the dashboard and the full name is displayed on each subsequent page rendered (through `menu.hbs`).\r\n\r\nRevised addPlaylist action:\r\n\r\n~~~\r\n...\r\n  addPlaylist(request, response) {\r\n    const loggedInUser = accounts.getCurrentUser(request);\r\n    const newPlayList = {\r\n      id: uuid(),\r\n      userid: loggedInUser.id,\r\n      title: request.body.title,\r\n      songs: [],\r\n    };\r\n    logger.debug('Creating a new Playlist', newPlayList);\r\n    playlistStore.addPlaylist(newPlayList);\r\n    response.redirect('/dashboard');\r\n  },\r\n...\r\n~~~\r\n\r\nLog in as marge and homer in turn, creating a single playlist (use a name you will remember). Make sure that the appropriate playlist appears in each users dashboard.\r\n\r\n\r\n## The Stores\r\n\r\nLooking at the playlist-store.json - it might (eventually when loaded) look like this:\r\n\r\n~~~\r\n{\r\n  \"playlistCollection\": [\r\n    {\r\n      \"id\": \"4a1ea4ec-303e-4b13-bd98-a6b04877e093\",\r\n      \"title\": \"test\",\r\n      \"songs\": []\r\n    },\r\n    {\r\n      \"id\": \"1e6ed5a0-28fe-4527-8ce8-6cb5c800b5be\",\r\n      \"userid\": \"2b6f0989-7b7f-4a38-ad26-aa06b922d751\",\r\n      \"title\": \"marges playlist\",\r\n      \"songs\": []\r\n    },\r\n    {\r\n      \"id\": \"07dd66fe-9f8f-456c-944d-48330bde4610\",\r\n      \"userid\": \"3ad52697-6d98-4d80-8273-084de55a86c0\",\r\n      \"title\": \"homers playlist\",\r\n      \"songs\": []\r\n    }\r\n  ]\r\n}\r\n~~~\r\n\r\nExamine it carefully - notice that the very first playlist is 'orphaned' - it has no userid. The others have userid - which correlates the playlists with the user in the users store:\r\n\r\n~~~\r\n{\r\n  \"users\": [\r\n    {\r\n      \"firstName\": \"homer\",\r\n      \"lastName\": \"simpson\",\r\n      \"email\": \"homer@simpson.com\",\r\n      \"password\": \"secret\",\r\n      \"id\": \"3ad52697-6d98-4d80-8273-084de55a86c0\"\r\n    },\r\n    {\r\n      \"firstName\": \"marge\",\r\n      \"lastName\": \"simpson\",\r\n      \"email\": \"marge@simpson.com\",\r\n      \"password\": \"secret\",\r\n      \"id\": \"2b6f0989-7b7f-4a38-ad26-aa06b922d751\"\r\n    }\r\n  ]\r\n}\r\n~~~\r\n"
    },
  
    {
    "title": "# Revised controller/ *.js modules",
    "shortTitle": "08",
    "contentMd" : "# Revised controller/ *.js modules\r\n\r\nThe `about.js`, `start.js` and `playlist.js` modules also need to keep track of the logged in user, so in each module, we need to import the `accounts` module. \r\nIn each module add the following statement (after or before the other `require` statement(s)):\r\n\r\n~~~\r\nconst accounts = require ('./accounts.js');\r\n~~~\r\n\r\n## Revised index action\r\n\r\nIn the `index` action for each module, we need to return an object for the logged in user to check that a user is actually logged in and if so extract their full name.\r\n\r\n\r\n### Revised index action (about.js)\r\n\r\n~~~\r\nindex(request, response) {\r\n    const loggedInUser = accounts.getCurrentUser(request);  \r\n    logger.info('about rendering');\r\n    if (loggedInUser) {\r\n    const viewData = {\r\n      title: 'About Playlist 1',\r\n      fullname: loggedInUser.firstName + ' ' + loggedInUser.lastName,\r\n    };\r\n    response.render('about', viewData);\r\n   }\r\n    else response.redirect('/');\r\n},\r\n~~~\r\n\r\n\r\n### Revised index action (start.js)\r\n\r\n~~~\r\nindex(request, response) {\r\n    const loggedInUser = accounts.getCurrentUser(request);  \r\n    logger.info('start rendering');\r\n    if (loggedInUser) {\r\n    const viewData = {\r\n      title: 'Welcome to Playlist 1',\r\n      fullname: loggedInUser.firstName + ' ' + loggedInUser.lastName,\r\n    };\r\n    response.render('start', viewData);\r\n    }\r\n    else response.redirect('/');\r\n},\r\n~~~\r\n\r\n### Revised index action (playlist.js)\r\n\r\n~~~\r\nindex(request, response) {\r\n    const loggedInUser = accounts.getCurrentUser(request);  \r\n    const playlistId = request.params.id;\r\n    logger.debug('Playlist id = ', playlistId);\r\n    if (loggedInUser) {\r\n    const viewData = {\r\n      title: 'Playlist',\r\n      playlist: playlistStore.getPlaylist(playlistId),\r\n      fullname: loggedInUser.firstName + ' ' + loggedInUser.lastName,\r\n    };\r\n    response.render('playlist', viewData);\r\n    }\r\n    else response.redirect('/');\r\n},\r\n~~~\r\n"
    },
  
    {
    "title": "# Exercises",
    "shortTitle": "Exercises",
    "contentMd" : "# Exercises\r\n\r\n## Exercise 1\r\n\r\nTest the application more comprehensively - signing up a range of users, and creating playlists. Make sure the users only see the playlists they have created.\r\n\r\n\r\n## Exercise 2\r\n\r\nLook at the `authenticate` method again:\r\n\r\n~~~\r\n  authenticate(request, response) {\r\n    const user = userstore.getUserByEmail(request.body.email);\r\n    if (user) {\r\n      response.cookie('playlist', user.email);\r\n      logger.info(`logging in ${user.email}`);\r\n      response.redirect('/dashboard');\r\n    } else {\r\n      response.redirect('/login');\r\n    }\r\n  },\r\n~~~\r\n\r\nCan you see anything not quite right about it?\r\n\r\nHint: what happens if incorrect password entered? Try this now.\r\n\r\nSee if you can fix this problem - i.e. only allow user to log in if they provide correct password.\r\n\r\n\r\n## Exercise 3\r\n\r\nUsing this lab as a guide - see if you can introduce sessions into your own project.\r\n\r\n\r\n"
    },
  
    {
    "title": "# Lab Solution",
    "shortTitle": "Solution",
    "contentMd" : "# Lab Solution\r\n\r\nA completed version of the lab can be imported into a new Glitch project from `rbirney/playlist5-complete`."
    }
  
  ]
  }

