


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-5 Glitch Playlist 2",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Refactor the dashboard controller to show summary of the playlists + link to show playlist details.</p>",
  "folder" : "book-a-glitch-playlist-2",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Objectives",
    "shortTitle": "Lab-5 Glitch Playlist 2",
    "contentMd" : "# Objectives\r\n\r\nRefactor the dashboard controller to show summary of the playlists + link to show playlist details.\r\n\r\n## Dashboard functionality\r\n\r\n- adjust dashboard to only display the playlist title, not the contents of each playlist\r\n\r\n## Playlist View\r\n\r\n- create a new view and controller called playlist that will render the contents of one playlist chosen by the user from the dashboard links\r\n\r\n## Delete a song\r\n\r\n- add the functionality to delete a song from a specific playlist1\r\n\r\n## Lodash library\r\n\r\n- managing data structures for creating, reading, updating and deleting data\r\n"
    },
  
    {
    "title": "# Lab 4 Exercise Solutions",
    "shortTitle": "Exercise Solutions",
    "contentMd" : "# Lab 4 Exercise Solutions\r\n\r\nThis lab requires that the `Glitch-playlist-1` lab be completed. If you have lost your solution, create a new project in Glitch and select the `import from github` option and enter `rbirney/playlist1-complete` to import a completed version.\r\n\r\n## Exercise 2: Add a new playlist\r\n\r\nExtend the JSON file to include an additional playlist - so that three playlists are displayed on the dashboard.\r\n\r\n## Exercise 3: Introduce IDs\r\n\r\nWhen manipulating data maintained in JSON, or other external format, each object will often require an ID in order to manipulate the information effectively. Introduce an ID for every playlist, and every song.\r\n\r\n## Exercise 4: New Fields\r\n\r\nExtend the playlist to have new entry called `duration`. Also, extend each song to also have a `duration` field + a `genre` field.\r\n\r\nModify the dashboard view to display these new fields.\r\n\r\n## Solutions\r\n\r\n## models/playlist-store.json\r\n\r\n~~~js\r\n{\r\n  \"playlistCollection\": [\r\n    {\r\n      \"id\" : \"01\",\r\n      \"title\": \"Beethoven Sonatas\",\r\n      \"duration\": 35,\r\n      \"songs\": [\r\n        {\r\n          \"id\" : \"04\",\r\n          \"title\": \"Piano Sonata No. 3\",\r\n          \"artist\": \"Beethoven\",\r\n          \"genre\": \"Classical\",\r\n          \"duration\": 5\r\n        },\r\n        {\r\n          \"id\" : \"05\",\r\n          \"title\": \"Piano Sonata No. 7\",\r\n          \"artist\": \"Beethoven\",\r\n          \"genre\": \"Classical\",\r\n          \"duration\": 6\r\n        },\r\n        {\r\n          \"id\" : \"06\",\r\n          \"title\": \"Piano Sonata No. 10\",\r\n          \"artist\": \"Beethoven\",\r\n          \"genre\": \"Classical\",\r\n          \"duration\": 4\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"id\" : \"02\",\r\n      \"title\": \"Beethoven Concertos\",\r\n      \"duration\": 23,\r\n      \"songs\": [\r\n        {\r\n          \"id\" : \"07\",\r\n          \"title\": \"Piano Concerto No. 0\",\r\n          \"artist\": \"Beethoven\",\r\n          \"genre\": \"Classical\",\r\n          \"duration\": 8\r\n        },\r\n        {\r\n          \"id\" : \"08\",\r\n          \"title\": \"Piano Concerto No. 4\",\r\n          \"artist\": \"Beethoven\",\r\n          \"genre\": \"Classical\",\r\n          \"duration\": 3\r\n        },\r\n        {\r\n          \"id\" : \"09\",\r\n          \"title\": \"Piano Concerto No. 6\",\r\n          \"artist\": \"Beethoven\",\r\n          \"genre\": \"Classical\",\r\n          \"duration\": 4\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"id\" : \"03\",\r\n      \"title\": \"Beethoven Variations\",\r\n      \"duration\": 67,\r\n      \"songs\": [\r\n        {\r\n          \"id\" : \"10\",\r\n          \"title\": \"Opus 34: Six variations on a theme in F major\",\r\n          \"artist\": \"Beethoven\",\r\n          \"genre\": \"Classical\",\r\n          \"duration\": 11\r\n        },\r\n        {\r\n          \"id\" : \"11\",\r\n          \"title\": \"Opus 120: Thirty-three variations on a waltz by Diabelli in C majo\",\r\n          \"artist\": \"Beethoven\",\r\n          \"genre\": \"Classical\",\r\n          \"duration\": 45\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n~~~\r\n\r\n## views/dashboard.hbs\r\n\r\n~~~html\r\n{{> menu id=\"dashboard\"}}\r\n\r\n{{#each playlists}}\r\n  <section class=\"ui segment\">\r\n    <h2 class=\"ui header\">\r\n      {{title}}\r\n    </h2>\r\n    <p> Total Duration: {{duration}} </p>\r\n    <table class=\"ui table\">\r\n      <thead>\r\n        <tr>\r\n          <th>Song</th>\r\n          <th>Artist</th>\r\n          <th>Genre</th>\r\n          <th>Duration</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {{#each songs}}\r\n          <tr>\r\n            <td>\r\n              {{title}}\r\n            </td>\r\n            <td>\r\n              {{artist}}\r\n            </td>\r\n            <td>\r\n              {{genre}}\r\n            </td>\r\n            <td>\r\n              {{duration}}\r\n            </td>\r\n          </tr>\r\n        {{/each}}\r\n      </tbody>\r\n    </table>\r\n  </section>\r\n{{/each}}\r\n~~~\r\n"
    },
  
    {
    "title": "# Playlist Summaries",
    "shortTitle": "01",
    "contentMd" : "# Playlist Summaries\r\n\r\nWe would like to change the app to just display a summary list of playlists on the dashboard, not the complete contents of each playlist. Replace the current dashboard view file with the following:\r\n\r\n## views/dashboard.hbs\r\n\r\n~~~html\r\n{{> menu id=\"dashboard\"}}\r\n\r\n{{#each playlists}}\r\n  <section class=\"ui segment\">\r\n    <h2 class=\"ui header\">\r\n      {{title}}\r\n    </h2>\r\n    <p> Total Duration: {{duration}} </p>\r\n    <a href=\"#\"> View </a>\r\n  </section>\r\n{{/each}}\r\n~~~\r\n\r\nThis will render like this:\r\n\r\n![](img/01.png)\r\n\r\nThe `view` links are currently unusable, but we would like them to cause a new view to be rendered, containing the playlist concerned.\r\n\r\nAs each playlist now has an ID, this can make this convenient to implement. Here is a new version of the `view` link:\r\n\r\n~~~html\r\n    <a href=\"/playlist/{{id}}\"> View </a>\r\n~~~\r\n\r\nWith this change in place, try hovering over each view link (without pressing it). In Chrome, keep an eye on the stats bar which should show a the link including the id:\r\n\r\n![](img/02.png)\r\n\r\nHover over each link and note how the ID changes. Clicking on any link causes the following error:\r\n\r\n~~~\r\nCannot GET /playlist/02\r\n~~~\r\n\r\nWe need a new controller to display a new view containing the playlist details. We will do this in the next step.\r\n"
    },
  
    {
    "title": "# Router + Controller",
    "shortTitle": "02",
    "contentMd" : "# Router + Controller\r\n\r\nThe starting point for any new link in our app is to first define a `route` to support this link. All supported routes are defined in `routes.js`\r\n\r\n## routes.js\r\n\r\n~~~js\r\n'use strict';\r\n\r\nconst express = require('express');\r\nconst router = express.Router();\r\n\r\nconst start = require('./controllers/start');\r\nconst dashboard = require('./controllers/dashboard.js');\r\nconst about = require('./controllers/about.js');\r\n\r\nrouter.get('/', start.index);\r\nrouter.get('/dashboard', dashboard.index);\r\nrouter.get('/about', about.index);\r\n\r\nmodule.exports = router;\r\n~~~\r\n\r\nIn particular, these are the three routes currently supported:\r\n\r\n~~~js\r\nrouter.get('/', start.index);\r\nrouter.get('/dashboard', dashboard.index);\r\nrouter.get('/about', about.index);\r\n~~~\r\n\r\nThese are the three patterns our app responds to: `/`, `/dashboard` and `/about`. Any other pattern will generate a not found error from our app.\r\n\r\nWe now have a new pattern `/playlist/id`, which we would like to route to a controller that would render a new view detailing the playlist contents. Also note that each of these statements matches a route pattern with a function inside a controller. So, for instance, this require statement allows access to the about.index function that is called by router.get\r\n\r\n~~~js\r\nconst about = require('./controllers/about.js');\r\n...\r\nrouter.get('/about', about.index);\r\n~~~\r\n\r\n... ensures that this function would be called if the route was triggered:\r\n\r\n~~~js\r\nconst about = {\r\n  index(request, response) {\r\n    const viewData = {\r\n      title: 'About Playlist Maker',\r\n    };\r\n    response.render('about', viewData);\r\n  },\r\n};\r\n~~~\r\n\r\nMake sure you understand this connection before proceeding.\r\n"
    },
  
    {
    "title": "# Controller/View/Route",
    "shortTitle": "03",
    "contentMd" : "# Controller/View/Route\r\n\r\nBringing in a new controller usually requires three things:\r\n\r\n- a controller\r\n- a view\r\n- a route\r\n\r\nCreate a new file and name it controller/playlist.js\r\n\r\nHere is the content for the new controller:\r\n\r\n## controllers/playlist.js\r\n\r\n~~~js\r\n'use strict';\r\n\r\nconst logger = require('../utils/logger');\r\nconst playlistCollection = require('../models/playlist-store.js');\r\n\r\nconst playlist = {\r\n  index(request, response) {\r\n    const viewData = {\r\n      title: 'Playlist',\r\n    };\r\n    response.render('playlist', viewData);\r\n  },\r\n};\r\n\r\nmodule.exports = playlist;\r\n~~~\r\n\r\nThis will render a view called `playlist`. This is the playlist view (for the moment):\r\n\r\nCreate a new file called views/playlist.hbs\r\nPlace the following code in the file:\r\n\r\n## views/playlist.hbs\r\n\r\n~~~html\r\n{{> menu}}\r\n\r\n<section class=\"ui center aligned middle aligned segment\">\r\n  <h2 class=\"ui header\">\r\n    Playlist Details...\r\n  </h2>\r\n</section>\r\n~~~\r\n\r\nFinally, the route. This will require the controller to be imported:\r\n\r\n## routes.js\r\n\r\n~~~js\r\n...\r\nconst playlist = require('./controllers/playlist.js');\r\n...\r\n~~~\r\n\r\n... and then we can add the new route:\r\n\r\n~~~js\r\nrouter.get('/playlist/:id', playlist.index);\r\n~~~\r\n\r\nNotice that the route includes this segment: `/:id`. This means it matches any route that includes an extra wildcard segment at the end.\r\n\r\nImplement all of the above now and verify that the view is rendered as expected.\r\n"
    },
  
    {
    "title": "# Playlists",
    "shortTitle": "04",
    "contentMd" : "# Playlists\r\n\r\nIn order to display the correct playlist, we need to extract the id from the url. Modify the playlist controller as follows:\r\n\r\n##/controllers/playlist.js\r\n~~~js\r\n  index(request, response) {\r\n    const playlistId = request.params.id;\r\n    logger.debug('Playlist id = ', playlistId);\r\n    const viewData = {\r\n      title: 'Playlist',\r\n    };\r\n    response.render('playlist', viewData);\r\n  },\r\n~~~\r\n\r\nWe are extracting and logging the id here:\r\n\r\n~~~\r\n    const playlistId = request.params.id;\r\n    logger.debug('Playlist id = ', playlistId);\r\n~~~\r\n\r\nRun the app and select each of the playlist links in turn. The logs will display each of the Ids in turn.\r\n\r\nWe need to find a way of locating the playlist with the id, and then pass this specific playlist to the view to be rendered. This requires a rethink of the model, in particular the `playlist-store.js` module.\r\n\r\nHere is a new version of this module:\r\n\r\n## models/playlist-store.js\r\n\r\n~~~js\r\n'use strict';\r\n\r\nconst playlistStore = {\r\n\r\n  playlistCollection: require('./playlist-store.json').playlistCollection,\r\n\r\n  getAllPlaylists() {\r\n    return this.playlistCollection;\r\n  },\r\n\r\n  getPlaylist(id) {\r\n    let foundPlaylist = null;\r\n    for (let playlist of this.playlistCollection) {\r\n      if (id == playlist.id) {\r\n        foundPlaylist = playlist;\r\n      }\r\n    }\r\n\r\n    return foundPlaylist;\r\n  },\r\n};\r\n\r\nmodule.exports = playlistStore;\r\n~~~\r\n\r\nIn this version, we have an object `playlistStore`, which has one attribute:\r\n\r\n- `playListCollection`: this is the array of playlists loaded from the json file.\r\n\r\nand two functions:\r\n\r\n- `getAllPlaylists()` : return all playlists\r\n- `getlPlaylist(id)`: locate and return a specific playlist.\r\n\r\nThe Dashboard controller will have to be refactored to use this object:\r\n\r\n## controllers/dashboard.js\r\n\r\n~~~js\r\n'use strict';\r\n\r\nconst logger = require('../utils/logger');\r\nconst playlistStore= require('../models/playlist-store');\r\n\r\nconst dashboard = {\r\n  index(request, response) {\r\n    logger.info('dashboard rendering');\r\n    const viewData = {\r\n      title: 'Playlist Dashboard',\r\n      playlists: playlistStore.getAllPlaylists(),\r\n    };\r\n    logger.info('about to render', playlistStore.getAllPlaylists());\r\n    response.render('dashboard', viewData);\r\n  },\r\n};\r\n\r\nmodule.exports = dashboard;\r\n\r\n~~~\r\n\r\nIn the above we are calling `playlistStore.getAllPlaylists()` in order to get the playlists to render to the same view.\r\n\r\nFinally, the playlists controller + view can be implemented.\r\n\r\n## controllers/playlist.js\r\n\r\n~~~js\r\n'use strict';\r\n\r\nconst logger = require('../utils/logger');\r\nconst playlistStore = require('../models/playlist-store');\r\n\r\nconst playlist = {\r\n  index(request, response) {\r\n    const playlistId = request.params.id;\r\n    logger.debug('Playlist id = ', playlistId);\r\n    const viewData = {\r\n      title: 'Playlist',\r\n      playlist: playlistStore.getPlaylist(playlistId),\r\n    };\r\n    response.render('playlist', viewData);\r\n  },\r\n};\r\n\r\nmodule.exports = playlist;\r\n~~~\r\n\r\n## views/playlist.hbs\r\n\r\n~~~html\r\n{{> menu}}\r\n\r\n<section class=\"ui center aligned middle aligned segment\">\r\n  <h2 class=\"ui header\">\r\n    {{playlist.title}}\r\n  </h2>\r\n  {{> listsongs}}\r\n</section>\r\n~~~\r\n\r\nThe app should now run as expected, with playlist summaries on the dashboard, and a view link rendering the playlists details.\r\n"
    },
  
    {
    "title": "# Deleting Songs 1",
    "shortTitle": "05",
    "contentMd" : "# Deleting Songs 1\r\n\r\nHaving a playlist app, without the ability to create/delete songs or playlists is clearly very limited. We have, essentially, an app that allows us to `Read` our models, but not `Create`, `Update` or `Delete` elements of the model.\r\n\r\nWe can start with providing a facility to delete songs from individual playlists. Our view will need to look like this:\r\n\r\n![](img/03.png)\r\n\r\nand clicking the delete button should remove the corresponding song.\r\n\r\nAny new button/link/action on our page requires:\r\n\r\n- an element in a view\r\n- a route matching the view element\r\n- a matching controller function\r\n\r\n.. and it may also involve some interaction with the model.\r\n\r\n# View\r\n\r\nThe new button must appear in each song row, therefore you must add another table data entry after the artist table data <td> tag:\r\n\r\n## views/partials/listsongs.hbs\r\n\r\n~~~html\r\n    ...\r\n        <td>\r\n          <a href=\"/playlist/{{../playlist.id}}/deletesong/{{id}}\" class=\"ui tiny red button\">Delete Song</a>\r\n        </td>\r\n    ...\r\n~~~\r\n\r\nDon't forget to add another table row header <th> tag after the Artist heading in the table so that it looks the same as screenshot above. Your code should look like this:\r\n\r\n~~~\r\n<table class=\"ui table\">\r\n  <thead>\r\n    <tr>\r\n      <th>Song</th>\r\n      <th>Artist</th>\r\n      <th>    </th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    {{#each playlist.songs}}\r\n      <tr>\r\n        <td>\r\n          {{title}}\r\n        </td>\r\n        <td>\r\n          {{artist}}\r\n        </td>\r\n        <td>\r\n         <a href=\"/playlist/{{../playlist.id}}/deleteSong/{{id}}\" class=\"ui tiny red button\">Delete Song</a></td>\r\n      </tr>\r\n    {{/each}}\r\n  </tbody>\r\n</table>\r\n~~~\r\n\r\n\r\n# Route\r\n\r\nA new route - containing both the playlist and song id - and linking to a new function in the playlist controller:\r\n\r\n## routes.js\r\n\r\n~~~js\r\nrouter.get('/playlist/:id/deleteSong/:songid', playlist.deleteSong);\r\n~~~\r\n\r\n# Controller\r\n\r\nThis is a new function to handle this route, add it just after the end of the index function closing }\r\n\r\n## controllers/playlist.js\r\n\r\n~~~js\r\n  deleteSong(request, response) {\r\n    const playlistId = request.params.id;\r\n    const songId = request.params.songid;\r\n    logger.debug(`Deleting Song ${songId} from Playlist ${playlistId}`);\r\n    playlistStore.removeSong(playlistId, songId);\r\n    response.redirect('/playlist/' + playlistId);\r\n  },\r\n~~~\r\n\r\n# Model\r\n\r\nThe model now needs a new method to delete a song, given the id of the playlist and the song, add this function just after the getPlaylist() function closing }\r\n\r\n## models/playlist-store.js\r\n\r\n~~~js\r\n  removeSong(id, songId) {\r\n    const playlist = this.getPlaylist(id);\r\n    // remove the song with id songId from the playlist\r\n  },\r\n~~~\r\n\r\nTry all of this now - and verify that the logs shows the attempt to delete the song when the button is pressed.\r\n\r\nWe haven't yet deleted the song - we will leave that to the next step.\r\n"
    },
  
    {
    "title": "# Deleting Songs 2",
    "shortTitle": "06",
    "contentMd" : "# Deleting Songs 2\r\n\r\nThere are many techniques for deleting an element from an array, which require more in depth Javascript knowledge. However, we have a simpler solution for the moment via the `lodash` library.\r\n\r\nAt the top of our `playlist-store.js` module, import this library:\r\n\r\n## models/playlist-store.js\r\n\r\n~~~js\r\nconst _ = require('lodash');\r\n~~~\r\n\r\nHere is the complete `removeSong` function:\r\n\r\n~~~js\r\n  removeSong(id, songId) {\r\n    const playlist = this.getPlaylist(id);\r\n    _.remove(playlist.songs, { id: songId });\r\n  },\r\n~~~\r\n\r\nThis library is already installed in our project template - and you can read about how it works and what is does:\r\n\r\n- <https://lodash.com/>\r\n\r\nThis is a modern, comprehensive library for managing data structures in Javascript. Watch this video:\r\n\r\n- <https://egghead.io/lessons/core-javascript-introduction-to-lodash>\r\n\r\nWhich will give you a very brief idea of some of the features of this library. This library has many features and capabilities and we will explore some of them in subsequent labs.\r\n\r\nAs a start - we can simplify the `getPlaylist` function:\r\n\r\n~~~js\r\n  getPlaylist(id) {\r\n    let foundPlaylist = null;\r\n    for (let playlist of this.playlistCollection) {\r\n      if (id == playlist.id) {\r\n        foundPlaylist = playlist;\r\n      }\r\n    }\r\n\r\n    return foundPlaylist;\r\n  },\r\n~~~\r\n\r\nThis performs a linear search to locate and return a playlist with a matching id. This can be simplified using lodash:\r\n\r\n~~~js\r\n  getPlaylist(id) {\r\n    return _.find(this.playlistCollection, { id: id });\r\n  },\r\n~~~\r\n\r\nIn future, when we are working with our playlists, we will usually check with lodash when we need to do anything, to see if it has a shorter/easier technique than writing our own algorithms.\r\n\r\nFor some more advanced uses, skim read this:\r\n\r\n- <http://colintoh.com/blog/lodash-10-javascript-utility-functions-stop-rewriting>\r\n\r\n"
    },
  
    {
    "title": "## Exercise 1: UX Enhancements",
    "shortTitle": "Exercises",
    "contentMd" : "## Exercise 1: UX Enhancements\r\n\r\nIntroduce a 'Delete Playlist' button for each playlist, represented by a `trash` icon. e.g:\r\n\r\n![](img/05.png)\r\n\r\nIn addition, replace the `view` link by a `folder open` icon.\r\n\r\nBind the `delete playlist` button to a new function to be implemented in the Dashboard controller, which should log the id of the playlist to be deleted.\r\n\r\n## Exercise 2: Delete Playlist Functionality\r\n\r\nMake the button actually delete the denoted playlist.\r\n\r\nHINT: This is a new function in the `playlist-store` module to delete a playlist, given an ID:\r\n\r\n~~~js\r\nremovePlaylist(id) {\r\n  _.remove(this.playlistCollection, { id: id });\r\n},\r\n~~~\r\n\r\nTry to implement the rest of the feature, using the song delete feature as a guide.\r\n\r\n## Exercise 3: listplaylists partial\r\n\r\nThis is the current `dashoard.hbs` partial:\r\n\r\n~~~html\r\n{{> menu id=\"dashboard\"}}\r\n\r\n{{#each playlists}}\r\n  <section class=\"ui segment\">\r\n    <h2 class=\"ui header\">\r\n      {{title}}\r\n    </h2>\r\n    <p> Total Duration: {{duration}} </p>\r\n    <a href=\"/playlist/{{id}}\" class=\"ui icon button\">\r\n      <i class=\"icon folder open\"></i>\r\n    </a>\r\n    <a href=\"/dashboard/deleteplaylist/{{id}}\" class=\"ui icon button\">\r\n      <i class=\"icon trash\"></i>\r\n    </a>\r\n  </section>\r\n{{/each}}\r\n~~~\r\n\r\nReplace the above with this version:\r\n\r\n~~~html\r\n{{> menu id=\"dashboard\"}}\r\n\r\n<section class=\"ui segment\">\r\n  {{> listplaylists}}\r\n</section>\r\n~~~\r\n\r\nThis requires you to write a new partial called `listplaylists`.\r\n\r\nHere is how the dashboard should look when complete:\r\n\r\n![](img/05.png)\r\n"
    }
  
  ]
  }

