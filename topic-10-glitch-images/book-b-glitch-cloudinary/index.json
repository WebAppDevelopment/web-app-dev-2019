


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-10b glitch-picture-store",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Build an application the can facilitate the upload and display of images in Glitch.</p>",
  "folder" : "book-b-glitch-cloudinary",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Objectives",
    "shortTitle": "Lab-10b glitch-picture-store",
    "contentMd" : "# Objectives\r\n\r\nBuild an application the can facilitate the upload and display of images in Glitch."
    },
  
    {
    "title": "# Setup",
    "shortTitle": "01",
    "contentMd" : "# Setup\r\n\r\nIn Glitch, create a new project and then import this repository to replace the default content:\r\n\r\n- <a href=\"github.com/rbirney/glitch-template-2\" target=\"_blank\">github.com/rbirney/glitch-template-2</a>\r\n\r\nYou do this by going to the Tools button in Glitch, select Git, Import, and Export. The choose Import from Github and enter `rbirney/glitch-template-2`\r\n\r\nExplore the UX. It is a variant on the template we have been already using, except this one has user accounts built in.\r\n\r\nThere are already two accounts pre-loaded (Homer and Marge). Try these out - and also try registering a new user.\r\n\r\nReview the source - it should be familiar from earlier labs.\r\n"
    },
  
    {
    "title": "# Express Libraries",
    "shortTitle": "02",
    "contentMd" : "# Express Libraries\r\n\r\n## package.json\r\n\r\nWe need to add some modules to our application to support image upload and the cloudinary API. These are included in the `package.json` file like this:\r\n\r\n~~~\r\n...\r\n   \"express-fileupload\": \"^0.1.2\",\r\n   \"cloudinary\": \"^1.8.0\",\r\n...\r\n~~~\r\n\r\nHere is how the package.json dependencies section should look now:\r\n\r\n~~~\r\n...\r\n  \"dependencies\": {\r\n    \"body-parser\": \"^1.15.2\",\r\n    \"cookie-parser\": \"^1.4.3\",\r\n    \"express\": \"^4.14.0\",\r\n    \"express-fileupload\": \"^0.1.2\",\r\n    \"cloudinary\": \"^1.8.0\",\r\n    \"express-handlebars\": \"^3.0.0\",\r\n    \"lodash\": \"^4.17.3\",\r\n    \"lowdb\": \"^0.14.0\",\r\n    \"uuid\": \"^3.0.1\",\r\n    \"winston\": \"^2.3.0\"\r\n  },\r\n...  \r\n~~~\r\n\r\n\r\nWhen editing the package.json file in Glitch, make sure to keep the logs open - so you can see if there are any typos/errors immediately.\r\n\r\nIf you are working fully offline, on your own workstations, then the following commands - entered from within the project folder - will update package.json for you automatically:\r\n\r\n~~~\r\nnpm install express-fileupload --save\r\nnpm install cloudinary --save\r\n\r\n~~~\r\n\r\n## server.js\r\n\r\nWe also need to include this module in `server.js` and initialise it correctly:\r\n\r\n~~~\r\n...\r\nconst fileUpload = require('express-fileupload');\r\n...\r\n\r\n\r\n...\r\napp.use(fileUpload());\r\n...\r\n~~~\r\n\r\nHere is the full server module:\r\n\r\n~~~\r\n'use strict';\r\n\r\nconst express = require('express');\r\nconst logger = require('./utils/logger');\r\nconst bodyParser = require('body-parser');\r\nconst cookieParser = require('cookie-parser');\r\nconst fileUpload = require('express-fileupload');\r\n\r\nconst app = express();\r\napp.use(cookieParser());\r\nconst exphbs = require('express-handlebars');\r\napp.use(bodyParser.urlencoded({ extended: false, }));\r\napp.use(express.static('public'));\r\napp.use(fileUpload());\r\napp.engine('.hbs', exphbs({\r\n  extname: '.hbs',\r\n  defaultLayout: 'main',\r\n}));\r\napp.set('view engine', '.hbs');\r\n\r\nconst routes = require('./routes');\r\napp.use('/', routes);\r\n\r\nconst listener = app.listen(process.env.PORT || 4000, function () {\r\n  logger.info(`Glitch-template-2 started on port ${listener.address().port}`);\r\n});\r\n~~~\r\n\r\n\r\nMake sure the app starts without any errors and functions as expected.\r\n"
    },
  
    {
    "title": "# The Picture Store",
    "shortTitle": "03",
    "contentMd" : "# The Picture Store\r\n\r\nWe will encapsulate our picture storage in a new module in the `models` folder called picture-store.js:\r\n\r\n## models/picture-store.js\r\n\r\n~~~\r\n'use strict';\r\n\r\nconst _ = require('lodash');\r\nconst JsonStore = require('./json-store');\r\nconst cloudinary = require('cloudinary');\r\nconst path = require('path');\r\nconst logger = require('../utils/logger');\r\n\r\ntry {\r\n  const env = require('../.data/.env.json');\r\n  cloudinary.config(env.cloudinary);\r\n}\r\ncatch(e) {\r\n  logger.info('You must provide a Cloudinary credentials file - see README.md');\r\n  process.exit(1);\r\n}\r\n\r\nconst pictureStore = {\r\n\r\n  store: new JsonStore('./models/picture-store.json', { pictures: [] }),\r\n  collection: 'pictures',\r\n\r\n  getAlbum(userid) {\r\n    return this.store.findOneBy(this.collection, { userid: userid });\r\n  },\r\n\r\n  addPicture(userId, title, imageFile, response) {\r\n    let album = this.getAlbum(userId);\r\n    if (!album) {\r\n      album = {\r\n        userid: userId,\r\n        photos: [],\r\n      };\r\n      this.store.add(this.collection, album);\r\n    }\r\n\r\n    imageFile.mv('tempimage', err => {\r\n      if (!err) {\r\n        cloudinary.uploader.upload('tempimage', result => {\r\n          console.log(result);\r\n          const picture = {\r\n            img: result.url,\r\n            title: title,\r\n          };\r\n          album.photos.push(picture);\r\n          response();\r\n        });\r\n      }\r\n    });\r\n  },\r\n\r\n  deletePicture(userId, image) {\r\n    const id = path.parse(image);\r\n    let album = this.getAlbum(userId);\r\n    _.remove(album.photos, { img: image });\r\n    cloudinary.api.delete_resources([id.name], function (result) {\r\n      console.log(result);\r\n    });\r\n  },\r\n\r\n  deleteAllPictures(userId) {\r\n    let album = this.getAlbum(userId);\r\n    if (album) {\r\n      album.photos.forEach(photo => {\r\n        const id = path.parse(photo.img);\r\n        cloudinary.api.delete_resources([id.name], result => {\r\n          console.log(result);\r\n        });\r\n      });\r\n      this.store.remove(this.collection, album);\r\n    }\r\n  },\r\n};\r\n\r\nmodule.exports = pictureStore;\r\n\r\n~~~\r\n\r\nYou do not need to understand this code in order to use it. Essentially, we just need to understand how to call these three methods:\r\n\r\n~~~\r\n  addPicture(userId, title, imageFile, response) {\r\n    ...\r\n  }\r\n  ...\r\n  deletePicture(userId, image) {\r\n    ...\r\n  },\r\n  ...    \r\n  deleteAllPictures(userId) {\r\n  }\r\n  ...\r\n~~~\r\n\r\nThese are the only methods we will need to call on the pictureStore object. We will see these in action in the next steps.\r\n\r\nBefore moving on, though, you now need the file of credentials we created in the last lab when we signed up to the cloudinary service. When you login to Cloudinary on your dashboard the details of your cloud name, api key, and api secret are there for you to copy.\r\n\r\n## .data/.env.json\r\n\r\n~~~\r\n{\r\n  \"cloudinary\": {\r\n    \"cloud_name\": \"YOURID\",\r\n    \"api_key\": \"YOURKEY\",\r\n    \"api_secret\": \"YOURSECRET\"\r\n  }\r\n}\r\n~~~\r\n\r\nCreate a folder called '.data' - this will be private in Glitch. Then create a file called `.env.json` in that folder containing your credentials as shown.\r\n\r\nNB: It is very important to keep your credentials in the `.data` folder - as they will be hidden from any Glitch users who wish to remix your app\r\n"
    },
  
    {
    "title": "# Dashboard",
    "shortTitle": "04",
    "contentMd" : "# Dashboard\r\n\r\nHere is a replacement for the Dashboard view:\r\n\r\n## views/dashboard.hbs\r\n\r\n~~~\r\n{{> menu id=\"dashboard\"}}\r\n\r\n<section class=\"ui segment\">\r\n  <h1 class=\"ui header\">\r\n    Welcome {{user.firstName}} {{user.lastName}}\r\n  </h1>\r\n\r\n  <section class=\"ui raised segment\">\r\n    <h1 class=\"ui header\">\r\n      Your Pictures:\r\n    </h1>\r\n  </section>\r\n\r\n  <section class=\"ui raised segment\">\r\n    <div class=\"ui small dividing header\"> Picture Upload </div>\r\n    <section class=\"ui raised form segment\">\r\n      <form action=\"/dashboard/uploadpicture\" method=\"post\" enctype=\"multipart/form-data\">\r\n        <div class=\"two fields\">\r\n          <div class=\"field\">\r\n            <label>File Name</label>\r\n            <input type=\"file\" name=\"picture\"> \r\n          </div>\r\n          <div class=\"field\">\r\n            <label>Title</label>\r\n            <input placeholder=\"Title\" type=\"text\" name=\"title\">\r\n          </div>\r\n        </div>\r\n        <button class=\"ui mini blue submit button\"> Upload </button>\r\n      </form>\r\n    </section>\r\n  </section>\r\n</section>\r\n~~~\r\n\r\nThe dashboard should look like this:\r\n\r\n![](img/01.png)\r\n\r\nThe UI for uploading a picture should work - try to upload one now. When you press the 'upload' button you will get this:\r\n\r\n~~~\r\nCannot POST /dashboard/uploadpicture\r\n~~~\r\n\r\nThis is because the form action route is not yet implemented:\r\n\r\n~~~\r\n...\r\n      <form action=\"/dashboard/uploadpicture\" method=\"post\" enctype=\"multipart/form-data\">\r\n...\r\n~~~\r\n"
    },
  
    {
    "title": "# Picture Routes",
    "shortTitle": "05",
    "contentMd" : "# Picture Routes\r\n\r\nWe can bring in this new route now:\r\n\r\n## routes.js\r\n~~~\r\n...\r\nrouter.post('/dashboard/uploadpicture', dashboard.uploadPicture);\r\n...\r\n~~~\r\n\r\nHere is a new version of the dashboard.js module:\r\n\r\n## controllers/dashboard.js\r\n\r\n~~~\r\n'use strict';\r\n\r\nconst logger = require('../utils/logger');\r\nconst accounts = require('./accounts.js');\r\nconst pictureStore = require('../models/picture-store.js');\r\n\r\nconst dashboard = {\r\n  index(request, response) {\r\n    logger.info('dashboard rendering');\r\n    const loggedInUser = accounts.getCurrentUser(request);\r\n    const viewData = {\r\n      title: 'PictureStore Dashboard',\r\n      user: loggedInUser,\r\n      album: pictureStore.getAlbum(loggedInUser.id),\r\n    };\r\n    response.render('dashboard', viewData);\r\n  },\r\n\r\n  uploadPicture(request, response) {\r\n    const loggedInUser = accounts.getCurrentUser(request);\r\n    pictureStore.addPicture(loggedInUser.id, request.body.title, request.files.picture, function () {\r\n      response.redirect('/dashboard');\r\n    });\r\n  },\r\n};\r\n\r\nmodule.exports = dashboard;\r\n~~~\r\n\r\nTry this now, and upload a picture - pick a small image from somewhere on your local machine. It will not display yet - but it should upload successfully.\r\n\r\nBecause of the lag in how Glitch works, it may take a little while for `picture-store.json` to refresh. Using the Tools menu, start the Console and type \"refresh\" this should force a refresh and you will see the file picture-store.json appears.\r\nWhen it does, it may look something like this:\r\n\r\n## models/picture-store.json\r\n\r\n~~~\r\n{\r\n  \"pictures\": [\r\n    {\r\n      \"userid\": \"3ad52697-6d98-4d80-8273-084de55a86c0\",\r\n      \"photos\": [\r\n        {\r\n          \"img\": \"http://res.cloudinary.com/edel020/image/upload/v1490458845/ncmyd6i1brylui1senk9.png\",\r\n          \"title\": \"\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n~~~\r\n\r\nLog in to your cloudinary account and see if the image is in your Media Library. Also, see if the image url corresponds with the \"img\" url in your picture-store.json file (if you can load it).\r\n\r\nOur pictures will not appear on our dashboard yet however (next steps).\r\n"
    },
  
    {
    "title": "# Displaying Pictures",
    "shortTitle": "06",
    "contentMd" : "# Displaying Pictures\r\n\r\nTo Display the pictures, replace the Your Pictures segment on dashboard.hbs file with this:\r\n\r\n~~~\r\n...\r\n  <section class=\"ui raised segment\">\r\n    <h3 class=\"ui header\">\r\n      Your Pictures:\r\n    </h3>\r\n    {{#each album.photos}}\r\n      <img src=\"{{img}}\">\r\n    {{/each}}\r\n  </section>\r\n...\r\n~~~\r\n\r\nWhen you log in now again, and if you upload some pictures, they will appear on the dashboard.\r\n\r\n![](img/02.png)\r\n\r\n# Cards\r\n\r\nWe could improve the layout by bringing in the following partial:\r\n\r\n## views/partials/card.hbs\r\n\r\n~~~\r\n<div class=\"ui card\">\r\n  <div class=\"ui small center aligned image\">\r\n    <img src=\"{{img}}\">\r\n  </div>\r\n  <div class=\"content\">\r\n    <p class=\"center aligned header\">{{title}}</p>\r\n    <div class=\"center aligned meta\">\r\n    </div>\r\n  </div>\r\n</div>\r\n~~~\r\n\r\n... and we can replace the picture segment on the dashboard with this:\r\n\r\n## views/dashboard.hbs\r\n\r\n~~~\r\n...\r\n  <section class=\"ui raised segment\">\r\n    <h3 class=\"ui header\">\r\n      Your Pictures:\r\n    </h3>\r\n    <div class=\"ui cards\">\r\n      {{#each album.photos}}\r\n        {{> card }}\r\n      {{/each}}\r\n    </div>\r\n  </section>\r\n...\r\n~~~\r\n\r\nTry it now:\r\n\r\n![](img/03.png)\r\n\r\nIf we add a title to the picture when we upload, it should appear in the card:\r\n\r\n![](img/04.png)\r\n"
    },
  
    {
    "title": "# Deleting Photos",
    "shortTitle": "07",
    "contentMd" : "# Deleting Photos\r\n\r\nFinally, we can bring in controls to delete images, either individually for in bulk. First the new routes:\r\n\r\n## routes.js\r\n\r\n~~~\r\n...\r\nrouter.get('/dashboard/deleteallpictures', dashboard.deleteAllPictures);\r\nrouter.get('/dashboard/deletepicture', dashboard.deletePicture);\r\n...\r\n~~~\r\n\r\nThis is the implementation of the Dashboard delete actions:\r\n\r\n## controllers/dashboard.js\r\n\r\n~~~\r\n...\r\n  deleteAllPictures(request, response) {\r\n    const loggedInUser = accounts.getCurrentUser(request);\r\n    pictureStore.deleteAllPictures(loggedInUser.id);\r\n    response.redirect('/dashboard');\r\n  },\r\n\r\n  deletePicture(request, response) {\r\n    const loggedInUser = accounts.getCurrentUser(request);\r\n    pictureStore.deletePicture(loggedInUser.id, request.query.img);\r\n    response.redirect('/dashboard');\r\n  },\r\n...  \r\n~~~\r\n\r\n# Delete All\r\n\r\nPlant this button somewhere in the dashboard view:\r\n\r\n## views/dashboard.hbs\r\n\r\n~~~\r\n...\r\n  <div class=\"ui segment\">\r\n    <a href=\"/dashboard/deleteallpictures\"> <button class=\"negative ui button\">Delete All</button></a>\r\n  </div>\r\n...\r\n\r\n~~~\r\n\r\nRun the app now, locate and press the `Delete All` button. It should remove all pictures for the logged in user. When you try it, check the Cloudinary web interface to see if the images are actually removed.\r\n\r\n# Delete a single picture\r\n\r\nTo delete a single picture, we need a new version of the card which will include a delete (trash can) button:\r\n\r\n## views/partials/card.hbs\r\n\r\n~~~\r\n<div class=\"ui card\">\r\n  <div class=\"ui small center aligned image\">\r\n    <img src=\"{{img}}\">\r\n  </div>\r\n  <div class=\"content\">\r\n    <p class=\"center aligned header\">{{title}}</p>\r\n    <div class=\"center aligned meta\">\r\n      <a href=\"/dashboard/deletepicture?img={{img}}\">\r\n        <i class=\"red icon trash\"></i>\r\n      </a>\r\n    </div>\r\n  </div>\r\n</div>\r\n~~~\r\n\r\n\r\nSee if you can delete individual pictures now.\r\n"
    },
  
    {
    "title": "# Solution",
    "shortTitle": "Exercises",
    "contentMd" : "# Solution\r\n\r\nThis is the completed application:\r\n\r\n- <a href= \"https://github.com/rbirney/glitch-image-store\" target=\"_blank\">`github.com/rbirney/glitch-image-store`</a>\r\n\r\nIf you are in Glitch - import the project from github: `rbirney/glitch-image-store`\r\n\r\n# Exercise 1: Download and run locally\r\n\r\nDownload the project and run it on our own workstation. Remember, after downloading you must run:\r\n\r\n~~~\r\nnpm install\r\n~~~\r\n\r\nfrom inside the project folder, and then run:\r\n\r\n~~~\r\nnpm start\r\n~~~\r\n\r\nto run. Browse to\r\n\r\n- <a href = \"http://localhost:4000\" target =\"_ blank\">localhost:4000</a>\r\n\r\nto see it in action. Experiment with uploading some pictures. However, you must have your own .env file locally if this to work:\r\n\r\n## .env.json\r\n\r\n~~~\r\n{\r\n  \"cloudinary\": {\r\n    \"cloud_name\": \"YOURID\",\r\n    \"api_key\": \"YOURKEY\",\r\n    \"api_secret\": \"YOURSECRET\"\r\n  }\r\n}\r\n~~~\r\n"
    }
  
  ]
  }

